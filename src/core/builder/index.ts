import { env } from '../../../env.js'
import { logger } from '../logger/index.js'
import {
  handleDeletedPhotos,
  loadExistingManifest,
  saveManifest,
} from '../manifest/manager.js'
import type { PhotoProcessorOptions } from '../photo/processor.js'
import { processPhoto } from '../photo/processor.js'
import { listImagesFromS3 } from '../s3/operations.js'
import type { PhotoManifestItem, ProcessPhotoResult } from '../types/photo.js'
import { WorkerPool } from '../worker/pool.js'

export interface BuilderOptions {
  isForceMode: boolean
  isForceManifest: boolean
  isForceThumbnails: boolean
  concurrencyLimit: number
}

// ‰∏ªÊûÑÂª∫ÂáΩÊï∞
export async function buildManifest(options: BuilderOptions): Promise<void> {
  const startTime = Date.now()

  try {
    logger.main.info('üöÄ ÂºÄÂßã‰ªé S3 Ëé∑ÂèñÁÖßÁâáÂàóË°®...')
    logger.main.info(`üîó ‰ΩøÁî®Á´ØÁÇπÔºö${env.S3_ENDPOINT || 'ÈªòËÆ§ AWS S3'}`)
    logger.main.info(`üåê Ëá™ÂÆö‰πâÂüüÂêçÔºö${env.S3_CUSTOM_DOMAIN || 'Êú™ËÆæÁΩÆ'}`)
    logger.main.info(`ü™£ Â≠òÂÇ®Ê°∂Ôºö${env.S3_BUCKET_NAME}`)
    logger.main.info(`üìÇ ÂâçÁºÄÔºö${env.S3_PREFIX || 'Êó†ÂâçÁºÄ'}`)

    // ËØªÂèñÁé∞ÊúâÁöÑ manifestÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ
    const existingManifest =
      options.isForceMode || options.isForceManifest
        ? []
        : await loadExistingManifest()
    const existingManifestMap = new Map(
      existingManifest.map((item) => [item.s3Key, item]),
    )

    logger.main.info(`Áé∞Êúâ manifest ÂåÖÂê´ ${existingManifest.length} Âº†ÁÖßÁâá`)

    // ÂàóÂá∫ S3 ‰∏≠ÁöÑÊâÄÊúâÂõæÁâáÊñá‰ª∂
    const imageObjects = await listImagesFromS3()
    logger.main.info(`S3 ‰∏≠ÊâæÂà∞ ${imageObjects.length} Âº†ÁÖßÁâá`)

    // ÂàõÂª∫ S3 ‰∏≠Â≠òÂú®ÁöÑÂõæÁâá key ÈõÜÂêàÔºåÁî®‰∫éÊ£ÄÊµãÂ∑≤Âà†Èô§ÁöÑÂõæÁâá
    const validKeys = imageObjects.map((obj) => obj.Key).filter(Boolean)
    const s3ImageKeys = new Set(validKeys)

    const manifest: PhotoManifestItem[] = []
    let processedCount = 0
    let skippedCount = 0
    let newCount = 0
    let deletedCount = 0

    if (imageObjects.length > 0) {
      // ÂàõÂª∫ Worker Ê±†
      const workerPool = new WorkerPool<ProcessPhotoResult>(
        {
          concurrency: options.concurrencyLimit,
          totalTasks: imageObjects.length,
        },
        logger,
      )

      const processorOptions: PhotoProcessorOptions = {
        isForceMode: options.isForceMode,
        isForceManifest: options.isForceManifest,
        isForceThumbnails: options.isForceThumbnails,
      }

      // ÊâßË°åÂπ∂ÂèëÂ§ÑÁêÜ
      const results = await workerPool.execute(async (taskIndex, workerId) => {
        const obj = imageObjects[taskIndex]
        return await processPhoto(
          obj,
          taskIndex,
          workerId,
          imageObjects.length,
          existingManifestMap,
          processorOptions,
          logger,
        )
      })

      // ÁªüËÆ°ÁªìÊûúÂπ∂Ê∑ªÂä†Âà∞ manifest
      for (const result of results) {
        if (result.item) {
          manifest.push(result.item)

          switch (result.type) {
            case 'new': {
              newCount++
              processedCount++
              break
            }
            case 'processed': {
              processedCount++
              break
            }
            case 'skipped': {
              skippedCount++
              break
            }
          }
        }
      }
    }

    // Ê£ÄÊµãÂπ∂Â§ÑÁêÜÂ∑≤Âà†Èô§ÁöÑÂõæÁâá
    if (
      !options.isForceMode &&
      !options.isForceManifest &&
      existingManifest.length > 0
    ) {
      deletedCount = await handleDeletedPhotos(
        existingManifest,
        s3ImageKeys,
        logger.main,
        logger.fs,
      )
    }

    // ‰øùÂ≠ò manifest
    await saveManifest(manifest, logger.fs)

    // ËÆ°ÁÆóÊÄªÂ§ÑÁêÜÊó∂Èó¥
    const totalDuration = Date.now() - startTime
    const durationSeconds = Math.round(totalDuration / 1000)
    const durationMinutes = Math.floor(durationSeconds / 60)
    const remainingSeconds = durationSeconds % 60

    logger.main.success(`üéâ Manifest ÊûÑÂª∫ÂÆåÊàê!`)
    logger.main.info(`üìä Â§ÑÁêÜÁªüËÆ°:`)
    logger.main.info(`   üì∏ ÊÄªÁÖßÁâáÊï∞Ôºö${manifest.length}`)
    logger.main.info(`   üÜï Êñ∞Â¢ûÁÖßÁâáÔºö${newCount}`)
    logger.main.info(`   üîÑ Â§ÑÁêÜÁÖßÁâáÔºö${processedCount}`)
    logger.main.info(`   ‚è≠Ô∏è Ë∑≥ËøáÁÖßÁâáÔºö${skippedCount}`)
    logger.main.info(`   üóëÔ∏è Âà†Èô§ÁÖßÁâáÔºö${deletedCount}`)
    logger.main.info(
      `   ‚è±Ô∏è ÊÄªËÄóÊó∂Ôºö${durationMinutes > 0 ? `${durationMinutes}ÂàÜ${remainingSeconds}Áßí` : `${durationSeconds}Áßí`}`,
    )
  } catch (error) {
    logger.main.error('‚ùå ÊûÑÂª∫ manifest Â§±Ë¥•Ôºö', error)
    throw error
  }
}
